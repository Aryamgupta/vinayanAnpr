{"ast":null,"code":"var _jsxFileName = \"/home/aryam/Videos/app/src/Components/Context/Context.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport axios from \"axios\";\nimport React, { createContext, useContext, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AllContext = /*#__PURE__*/createContext();\n// direction,\n// category,\n// minSpeed,\n// maxSpeed,\n// startDate,\n// endDate,\n// type,\n// ocr\nconst AllProvider = ({\n  children\n}) => {\n  _s();\n  const apiMainUrl = \"http://127.0.0.1:8001\";\n  const [singleView, setSingleView] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [recordData, setRecordData] = useState([]);\n  const [recentRecord, setRecentRecord] = useState([]);\n  const [crouselZoom, setCrouselZoom] = useState(false);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPage, setTotalPage] = useState(10);\n  const [filters, setFilters] = useState({});\n  const [recentRecords, setRecentRecords] = useState([]);\n  const [generalANPRSetting, setGeneralANPRSetting] = useState({});\n  const [overlay, setOverlay] = useState(null);\n  const [roiDatas, setRoiDatas] = useState([]);\n  const setTimeString = function (datee) {\n    datee = new Date(datee);\n    const months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n    const monthAbbreviation = months[datee.getMonth()];\n\n    // Get the day, year, and hours\n    const day = datee.getDate();\n    const year = datee.getFullYear();\n    let hours = datee.getHours();\n    const minutes = datee.getMinutes();\n\n    // Convert hours to 12-hour format and determine AM/PM\n    const amPm = hours >= 12 ? \"PM\" : \"AM\";\n    hours = hours % 12 || 12;\n\n    // Format the time with leading zero for minutes if needed\n    const formattedTime = `${hours}:${minutes < 10 ? \"0\" : \"\"}${minutes}`;\n\n    // Create the final formatted date string\n    const formattedDate = `${monthAbbreviation} ${day}, ${year} | ${formattedTime} ${amPm}`;\n    return formattedDate;\n  };\n  const fetchRecentRecords = async function () {\n    try {\n      const eventSource = new EventSource(\"http://localhost:5000/stream\");\n\n      // Event listener for 'publish' events\n      eventSource.addEventListener(\"publish\", event => {\n        try {\n          const parsedData = JSON.parse(event.data);\n          onPublish(parsedData);\n        } catch (error) {\n          console.log(\"Failed to parse 'publish' SSE data\", error);\n        }\n      });\n\n      // Event listener for general messages (if any)\n      eventSource.onmessage = event => {\n        try {\n          //   const parsedData = JSON.parse(event.data);\n          // console.log(par)\n        } catch (error) {\n          console.log(\"Failed to parse general SSE data\", error);\n        }\n      };\n      eventSource.onerror = event => {\n        console.log(\"Error occurred with SSE connection\");\n        console.error(\"SSE error:\", event);\n      };\n    } catch (error) {\n      console.error(\"Error occurred:\", error);\n    }\n  };\n\n  // Function to handle 'publish' events\n  function onPublish(data) {\n    let d = data.data;\n    let newRecentRecords = [d, ...recentRecords];\n    // console.log(newRecentRecords);\n    setRecentRecords(newRecentRecords);\n  }\n\n  // function to get the anpr genral settings\n  const getAnprGenSetting = async function () {\n    try {\n      if (!sessionStorage.getItem(\"admin_key\")) {\n        return;\n      }\n      const response = await fetch(`${process.env.REACT_APP_BASE_URL}/general_setting/`, {\n        method: \"GET\",\n        headers: {\n          key: sessionStorage.getItem(\"admin_key\"),\n          Admin_key: sessionStorage.getItem(\"admin_key\"),\n          \"Content-Type\": \"application/json\",\n          \"ngrok-skip-browser-warning\": true\n        }\n      });\n      console.log(response);\n      if (!response.ok) {\n        // Handle HTTP errors\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      const {\n        data\n      } = await response.json();\n      console.log(data);\n      setGeneralANPRSetting(data.general_setting);\n    } catch (error) {\n      console.log({\n        \"Error Occurred\": error\n      });\n    }\n  };\n\n  // function to change the anpr general settings\n  const postGenSetting = async function () {\n    try {\n      const body = {\n        ...generalANPRSetting,\n        cam_updated: 1\n      };\n      const response = await fetch(`${process.env.REACT_APP_BASE_URL}/general_setting/`, {\n        method: \"POST\",\n        headers: {\n          key: sessionStorage.getItem(\"admin_key\"),\n          Admin_key: sessionStorage.getItem(\"admin_key\"),\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(body)\n      });\n      if (response.status === 201) {\n        await getAnprGenSetting();\n      }\n\n      // const data = await response.json();\n    } catch (error) {\n      console.log({\n        \"Error Occurred\": error\n      });\n    }\n  };\n  const vehCategoryObj = {\n    car: \"Car\",\n    truck: \"Truck\",\n    bus: \"Bus\",\n    mgv: \"MGV\",\n    twowheeler: \"Two Wheeler\",\n    auto: \"Auto\"\n  };\n\n  // api call for all records\n  const fetchAllRecords = async function () {\n    setLoading(true);\n    try {\n      const formData = new FormData();\n      formData.append(\"current_page\", currentPage);\n      formData.append(\"page_size\", 12);\n      filters.startDate && formData.append(\"start_date\", filters.startDate);\n      filters.endDate && formData.append(\"end_date\", filters.endDate);\n      filters.ocr && formData.append(\"vehicle_registration_number\", filters.ocr.toUpperCase());\n      filters.fromTime && formData.append(\"from_time\", `${filters.fromTime}:00`);\n      filters.toTime && formData.append(\"to_time\", `${filters.toTime}:00`);\n      const response = await axios.post(`${process.env.REACT_APP_BASE_URL}/get_vehicle_detect_data_pagewise/`, formData, {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\",\n          key: sessionStorage.getItem(\"admin_key\")\n        }\n      });\n      console.log(response.data.data);\n      setRecordData(response.data.data);\n      setTotalPage(Math.ceil(response.data.counts[0].total_count / 12));\n    } catch (error) {\n      console.log({\n        \"Error Occured\": error\n      });\n    }\n    setLoading(false);\n  };\n\n  // api call for all recent records\n  const fetchAllRecentRecord = async function () {\n    try {\n      const eventSource = new EventSource(`https://59c8-2405-201-4032-4043-233f-2f45-211e-b955.ngrok-free.app/stream/`);\n      eventSource.onmessage = event => {\n        const data = JSON.parse(event.data);\n        console.log(data);\n      };\n      eventSource.onerror = err => {\n        console.error(\"EventSource failed:\", err);\n        eventSource.close();\n      };\n    } catch (error) {\n      console.log({\n        \"Error Occured\": error\n      });\n    }\n  };\n\n  // \n  function capitalizeFirstLetter(word) {\n    if (!word) return word; // Handle empty input\n    return word.charAt(0).toUpperCase() + word.slice(1).toLowerCase();\n  }\n\n  // fucntion to delete the records from the data\n  const deleteRecord = async function (id) {\n    try {\n      const response = await axios.post(`${process.env.REACT_APP_BASE_URL}/delete_captured_data/`, {\n        id\n      }, {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          key: sessionStorage.getItem(\"admin_key\")\n        }\n      });\n      console.log(response);\n      await fetchAllRecords();\n    } catch (error) {\n      console.log({\n        \"Error Occured\": error\n      });\n    }\n  };\n\n  // function to get the ROI data\n  const getRois = async function () {\n    try {\n      if (!sessionStorage.getItem(\"admin_key\")) {\n        return;\n      }\n      const response = await fetch(`${process.env.REACT_APP_BASE_URL}/manage_roi/`, {\n        method: \"GET\",\n        headers: {\n          key: sessionStorage.getItem(\"admin_key\"),\n          Admin_key: sessionStorage.getItem(\"admin_key\"),\n          \"Content-Type\": \"application/json\",\n          \"ngrok-skip-browser-warning\": true\n        }\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      const {\n        data\n      } = await response.json(); // Parse the response as JSON\n      setRoiDatas(data);\n    } catch (error) {\n      console.log({\n        \"Error Occurred\": error\n      });\n    }\n  };\n\n  // function to post the new ROI into the\n  const postRois = async function () {\n    try {\n      if (!sessionStorage.getItem(\"admin_key\")) {\n        return;\n      }\n      const response = await fetch(`${process.env.REACT_APP_BASE_URL}/manage_roi/`, {\n        method: \"POST\",\n        headers: {\n          key: sessionStorage.getItem(\"admin_key\"),\n          Admin_key: sessionStorage.getItem(\"admin_key\"),\n          \"Content-Type\": \"application/json\",\n          \"ngrok-skip-browser-warning\": true\n        }\n        // body: JSON.stringify(body),\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      const {\n        data\n      } = await response.json();\n      console.log(data);\n    } catch (error) {\n      console.log({\n        \"Error Occurred\": error\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(AllContext.Provider, {\n    value: {\n      setTimeString,\n      vehCategoryObj,\n      singleView,\n      setSingleView,\n      loading,\n      setLoading,\n      recordData,\n      setRecordData,\n      fetchAllRecords,\n      fetchAllRecentRecord,\n      recentRecord,\n      setRecentRecord,\n      apiMainUrl,\n      crouselZoom,\n      setCrouselZoom,\n      currentPage,\n      setCurrentPage,\n      totalPage,\n      setTotalPage,\n      filters,\n      setFilters,\n      capitalizeFirstLetter,\n      deleteRecord,\n      getAnprGenSetting,\n      generalANPRSetting,\n      setGeneralANPRSetting,\n      postGenSetting,\n      fetchRecentRecords,\n      recentRecords,\n      setRecentRecords,\n      overlay,\n      setOverlay,\n      roiDatas,\n      setRoiDatas,\n      getRois,\n      postRois\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 352,\n    columnNumber: 5\n  }, this);\n};\n_s(AllProvider, \"EYgAaoGmCipPnO53baucWSrHNuk=\");\n_c = AllProvider;\nexport const AllState = () => {\n  _s2();\n  return useContext(AllContext);\n};\n_s2(AllState, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n_c2 = AllState;\nexport default AllProvider;\nvar _c, _c2;\n$RefreshReg$(_c, \"AllProvider\");\n$RefreshReg$(_c2, \"AllState\");","map":{"version":3,"names":["axios","React","createContext","useContext","useState","jsxDEV","_jsxDEV","AllContext","AllProvider","children","_s","apiMainUrl","singleView","setSingleView","loading","setLoading","recordData","setRecordData","recentRecord","setRecentRecord","crouselZoom","setCrouselZoom","currentPage","setCurrentPage","totalPage","setTotalPage","filters","setFilters","recentRecords","setRecentRecords","generalANPRSetting","setGeneralANPRSetting","overlay","setOverlay","roiDatas","setRoiDatas","setTimeString","datee","Date","months","monthAbbreviation","getMonth","day","getDate","year","getFullYear","hours","getHours","minutes","getMinutes","amPm","formattedTime","formattedDate","fetchRecentRecords","eventSource","EventSource","addEventListener","event","parsedData","JSON","parse","data","onPublish","error","console","log","onmessage","onerror","d","newRecentRecords","getAnprGenSetting","sessionStorage","getItem","response","fetch","process","env","REACT_APP_BASE_URL","method","headers","key","Admin_key","ok","Error","status","json","general_setting","postGenSetting","body","cam_updated","stringify","vehCategoryObj","car","truck","bus","mgv","twowheeler","auto","fetchAllRecords","formData","FormData","append","startDate","endDate","ocr","toUpperCase","fromTime","toTime","post","Math","ceil","counts","total_count","fetchAllRecentRecord","err","close","capitalizeFirstLetter","word","charAt","slice","toLowerCase","deleteRecord","id","getRois","postRois","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","AllState","_s2","_c2","$RefreshReg$"],"sources":["/home/aryam/Videos/app/src/Components/Context/Context.js"],"sourcesContent":["import axios from \"axios\";\nimport React, { createContext, useContext, useState } from \"react\";\n\nconst AllContext = createContext();\n// direction,\n// category,\n// minSpeed,\n// maxSpeed,\n// startDate,\n// endDate,\n// type,\n// ocr\nconst AllProvider = ({ children }) => {\n  const apiMainUrl = \"http://127.0.0.1:8001\";\n  const [singleView, setSingleView] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [recordData, setRecordData] = useState([]);\n  const [recentRecord, setRecentRecord] = useState([]);\n  const [crouselZoom, setCrouselZoom] = useState(false);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPage, setTotalPage] = useState(10);\n  const [filters, setFilters] = useState({});\n  \n\n  const [recentRecords, setRecentRecords] = useState([]);\n\n  const [generalANPRSetting, setGeneralANPRSetting] = useState({});\n\n  const [overlay, setOverlay] = useState(null);\n\n  const [roiDatas, setRoiDatas] = useState([]);\n\n  const setTimeString = function (datee) {\n    datee = new Date(datee);\n    const months = [\n      \"Jan\",\n      \"Feb\",\n      \"Mar\",\n      \"Apr\",\n      \"May\",\n      \"Jun\",\n      \"Jul\",\n      \"Aug\",\n      \"Sep\",\n      \"Oct\",\n      \"Nov\",\n      \"Dec\",\n    ];\n\n    const monthAbbreviation = months[datee.getMonth()];\n\n    // Get the day, year, and hours\n    const day = datee.getDate();\n    const year = datee.getFullYear();\n    let hours = datee.getHours();\n    const minutes = datee.getMinutes();\n\n    // Convert hours to 12-hour format and determine AM/PM\n    const amPm = hours >= 12 ? \"PM\" : \"AM\";\n    hours = hours % 12 || 12;\n\n    // Format the time with leading zero for minutes if needed\n    const formattedTime = `${hours}:${minutes < 10 ? \"0\" : \"\"}${minutes}`;\n\n    // Create the final formatted date string\n    const formattedDate = `${monthAbbreviation} ${day}, ${year} | ${formattedTime} ${amPm}`;\n\n    return formattedDate;\n  };\n\n  const fetchRecentRecords = async function () {\n    try {\n      const eventSource = new EventSource(\"http://localhost:5000/stream\");\n\n      // Event listener for 'publish' events\n      eventSource.addEventListener(\"publish\", (event) => {\n        try {\n          const parsedData = JSON.parse(event.data);\n          onPublish(parsedData);\n        } catch (error) {\n          console.log(\"Failed to parse 'publish' SSE data\", error);\n        }\n      });\n\n      // Event listener for general messages (if any)\n      eventSource.onmessage = (event) => {\n        try {\n        //   const parsedData = JSON.parse(event.data);\n          // console.log(par)\n        } catch (error) {\n          console.log(\"Failed to parse general SSE data\", error);\n        }\n      };\n\n      eventSource.onerror = (event) => {\n        console.log(\"Error occurred with SSE connection\");\n        console.error(\"SSE error:\", event);\n      };\n    } catch (error) {\n      console.error(\"Error occurred:\", error);\n    }\n  };\n\n  // Function to handle 'publish' events\n  function onPublish(data) {\n    let d = data.data;\n    let newRecentRecords = [d, ...recentRecords];\n    // console.log(newRecentRecords);\n    setRecentRecords(newRecentRecords);\n  }\n  \n\n\n  // function to get the anpr genral settings\n  const getAnprGenSetting = async function () {\n    try {\n      if (!sessionStorage.getItem(\"admin_key\")) {\n        return;\n      }\n\n      const response = await fetch(\n        `${process.env.REACT_APP_BASE_URL}/general_setting/`,\n        {\n          method: \"GET\",\n          headers: {\n            key: sessionStorage.getItem(\"admin_key\"),\n            Admin_key: sessionStorage.getItem(\"admin_key\"),\n            \"Content-Type\": \"application/json\",\n            \"ngrok-skip-browser-warning\": true,\n          },\n        }\n      );\n      console.log(response);\n      if (!response.ok) {\n        // Handle HTTP errors\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n\n      const { data } = await response.json();\n      console.log(data);\n\n      setGeneralANPRSetting(data.general_setting);\n    } catch (error) {\n      console.log({ \"Error Occurred\": error });\n    }\n  };\n\n\n\n  // function to change the anpr general settings\n  const postGenSetting = async function () {\n    try {\n      const body = { ...generalANPRSetting, cam_updated: 1 };\n\n      const response = await fetch(\n        `${process.env.REACT_APP_BASE_URL}/general_setting/`,\n        {\n          method: \"POST\",\n          headers: {\n            key: sessionStorage.getItem(\"admin_key\"),\n            Admin_key: sessionStorage.getItem(\"admin_key\"),\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify(body),\n        }\n      );\n\n      if (response.status === 201) {\n        await getAnprGenSetting();\n      }\n\n      // const data = await response.json();\n    } catch (error) {\n      console.log({ \"Error Occurred\": error });\n    }\n  };\n\n\n  \n\n  const vehCategoryObj = {\n    car: \"Car\",\n    truck: \"Truck\",\n    bus: \"Bus\",\n    mgv: \"MGV\",\n    twowheeler: \"Two Wheeler\",\n    auto: \"Auto\",\n  };\n\n  // api call for all records\n  const fetchAllRecords = async function () {\n    setLoading(true);\n\n    try {\n      const formData = new FormData();\n      formData.append(\"current_page\", currentPage);\n      formData.append(\"page_size\", 12);\n      filters.startDate && formData.append(\"start_date\", filters.startDate);\n      filters.endDate && formData.append(\"end_date\", filters.endDate);\n      filters.ocr &&\n        formData.append(\n          \"vehicle_registration_number\",\n          filters.ocr.toUpperCase()\n        );\n      filters.fromTime &&\n        formData.append(\"from_time\", `${filters.fromTime}:00`);\n      filters.toTime && formData.append(\"to_time\", `${filters.toTime}:00`);\n\n      const response = await axios.post(\n        `${process.env.REACT_APP_BASE_URL}/get_vehicle_detect_data_pagewise/`,\n        formData,\n        {\n          headers: {\n            \"Content-Type\": \"multipart/form-data\",\n            key: sessionStorage.getItem(\"admin_key\"),\n          },\n        }\n      );\n\n      console.log(response.data.data);\n      setRecordData(response.data.data);\n      setTotalPage(Math.ceil(response.data.counts[0].total_count / 12));\n    } catch (error) {\n      console.log({ \"Error Occured\": error });\n    }\n    setLoading(false);\n  };\n\n\n\n  // api call for all recent records\n  const fetchAllRecentRecord = async function () {\n    try {\n      const eventSource = new EventSource(\n        `https://59c8-2405-201-4032-4043-233f-2f45-211e-b955.ngrok-free.app/stream/`\n      );\n\n      eventSource.onmessage = (event) => {\n        const data = JSON.parse(event.data);\n        console.log(data);\n      };\n\n      eventSource.onerror = (err) => {\n        console.error(\"EventSource failed:\", err);\n        eventSource.close();\n      };\n    } catch (error) {\n      console.log({ \"Error Occured\": error });\n    }\n  };\n\n  \n\n  // \n  function capitalizeFirstLetter(word) {\n    if (!word) return word; // Handle empty input\n    return word.charAt(0).toUpperCase() + word.slice(1).toLowerCase();\n  }\n\n\n  // fucntion to delete the records from the data\n  const deleteRecord = async function (id) {\n    try {\n      const response = await axios.post(\n        `${process.env.REACT_APP_BASE_URL}/delete_captured_data/`,\n        { id },\n        {\n          headers: {\n            \"Content-Type\": \"application/json\",\n            key: sessionStorage.getItem(\"admin_key\"),\n          },\n        }\n      );\n      console.log(response)\n      await fetchAllRecords();\n    } catch (error) {\n      console.log({ \"Error Occured\": error });\n    }\n  };\n\n\n  // function to get the ROI data\n  const getRois = async function () {\n    try {\n      if (!sessionStorage.getItem(\"admin_key\")) {\n        return;\n      }\n  \n      const response = await fetch(\n        `${process.env.REACT_APP_BASE_URL}/manage_roi/`,\n        {\n          method: \"GET\",\n          headers: {\n            key: sessionStorage.getItem(\"admin_key\"),\n            Admin_key: sessionStorage.getItem(\"admin_key\"),\n            \"Content-Type\": \"application/json\",\n            \"ngrok-skip-browser-warning\": true,\n          },\n        }\n      );\n  \n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n  \n      const {data} = await response.json(); // Parse the response as JSON\n      setRoiDatas(data);\n  \n    } catch (error) {\n      console.log({ \"Error Occurred\": error });\n    }\n  };\n\n\n\n\n  // function to post the new ROI into the\n  const postRois = async function () {\n    try {\n      if (!sessionStorage.getItem(\"admin_key\")) {\n        return;\n      }\n  \n      const response = await fetch(\n        `${process.env.REACT_APP_BASE_URL}/manage_roi/`,\n        {\n          method: \"POST\",\n          headers: {\n            key: sessionStorage.getItem(\"admin_key\"),\n            Admin_key: sessionStorage.getItem(\"admin_key\"),\n            \"Content-Type\": \"application/json\",\n            \"ngrok-skip-browser-warning\": true,\n          },\n          // body: JSON.stringify(body),\n        }\n      );\n  \n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n  \n      const {data} = await response.json();\n      console.log(data);\n  \n    } catch (error) {\n      console.log({ \"Error Occurred\": error });\n    }\n  };\n  \n\n  return (\n    <AllContext.Provider\n      value={{\n        setTimeString,\n        vehCategoryObj,\n        singleView,\n        setSingleView,\n        loading,\n        setLoading,\n        recordData,\n        setRecordData,\n        fetchAllRecords,\n        fetchAllRecentRecord,\n        recentRecord,\n        setRecentRecord,\n        apiMainUrl,\n        crouselZoom,\n        setCrouselZoom,\n        currentPage,\n        setCurrentPage,\n        totalPage,\n        setTotalPage,\n        filters,\n        setFilters,\n        capitalizeFirstLetter,\n        deleteRecord,\n        getAnprGenSetting,\n        generalANPRSetting,\n        setGeneralANPRSetting,\n        postGenSetting,\n        fetchRecentRecords,\n        recentRecords,\n        setRecentRecords,\n        overlay,\n        setOverlay,\n        roiDatas, setRoiDatas,\n        getRois,\n        postRois\n      }}\n    >\n      {children}\n    </AllContext.Provider>\n  );\n};\n\nexport const AllState = () => {\n  return useContext(AllContext);\n};\n\nexport default AllProvider;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}